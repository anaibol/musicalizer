var fs, jade, path, production;

jade = require('jade');

fs = require('fs');

path = require('path');

production = process.env.NODE_ENV === !"production";

module.exports = function(options) {
  var build, get, refresh, runtime, runtimePath, templates;
  options.namespace || (options.namespace = "window.templates");
  options.url || (options.url = "/templates.js");
  options.src || (options.src = path.join(process.cwd(), "templates"));
  runtimePath = path.join(__dirname, 'runtime.js');
  runtime = fs.readFileSync(runtimePath).toString();
  templates = null;
  refresh = function(dir, templates) {
    var dirpath, prevDir;
    if (dir == null) dir = "";
    if (templates == null) templates = {};
    prevDir = process.cwd();
    process.chdir(options.src);
    dirpath = path.join(options.src, dir);
    fs.readdirSync(dirpath).forEach(function(filename) {
      var basename, filepath, key, opts, template;
      filepath = path.join(options.src, dir, filename);
      if (fs.statSync(filepath).isDirectory()) {
        templates[filename] = {};
        return refresh(path.join(dir, filename), templates[filename]);
      } else {
        template = fs.readFileSync(filepath);
        basename = path.basename(filename, path.extname(filename));
        key = basename;
        opts = {
          client: true,
          compileDebug: !production,
          filename: path.join(dir, filename)
        };
        return templates[key] = jade.compile(template, opts).toString();
      }
    });
    process.chdir(prevDir);
    return templates;
  };
  build = function() {
    var ast, parser, str, uglify, walk;
    str = runtime + "\n";
    str += "" + options.namespace + " || (" + options.namespace + " = {})\n";
    walk = function(prefix, templates) {
      var key, p, template, _results;
      _results = [];
      for (key in templates) {
        template = templates[key];
        p = "" + prefix + "['" + key + "']";
        str += "" + p + " = ";
        if (typeof template === "string") {
          _results.push(str += "" + template + "\n");
        } else {
          str += "{}\n";
          _results.push(walk(p, template));
        }
      }
      return _results;
    };
    walk("" + options.namespace, refresh());
    str = unescape(str);
    if (production) {
      parser = require('uglify-js').parser;
      uglify = require('uglify-js').uglify;
      ast = parser.parse(str);
      ast = uglify.ast_mangle(ast);
      ast = uglify.ast_squeeze(ast);
      str = uglify.gen_code(ast);
    }
    return str;
  };
  get = function() {
    if (templates === null || !production) templates = build();
    return templates;
  };
  return function(req, res, next) {
    if (req.url === options.url) {
      return res.send(get(), {
        'Content-Type': 'application/javascript'
      });
    } else {
      return next();
    }
  };
};
